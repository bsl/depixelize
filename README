README
Author: Cary Yang <caryy@andrew.cmu.edu>

---------------------------------------------------------------------------
Overview
---------------------------------------------------------------------------

This project is a C++ implementation of Depixelizing Pixel Art, by Kopf and
Lischinski, SIGGRAPH 2011, written for my final project in CMU's 15-463,
Computational Photography.

What follows is instructions on building the code, running the program, and a
description of the source files.

This README and the CMake build system for this project were largely adapted
from projects in 15-462, Computer Graphics.

---------------------------------------------------------------------------
Prerequisites
---------------------------------------------------------------------------

There are some libraries required for this to compile, namely OpenCV (for
image reading/writing and colorspace conversion), Boost (for the Voronoi
diagram), and libNURB (for non-uniform rational b-splines).

---------------------------------------------------------------------------
Building the Code
---------------------------------------------------------------------------

This project uses the CMake build system (www.cmake.org). CMake is a kind of
"meta build-system," in that it creates a build system for you. It supports
many different build systems, ranging from Unix Makefiles to Visual Studio
projects to XCode projects.

1) If you don't have CMake installed, you should install it. If you're running
    Linux, it should be available through your disto's package manager
    (apt-get, pacman, ports, etc). Windows and OSX installers can be downloaded
    from http://www.cmake.org/cmake/resources/software.html
2) Open up a command prompt in the "build" directory and run "cmake ../src".
    CMake will generate the build system in the build directory. By default,
    CMake will generate Makefiles on Linux and OSX and a Visual Studio project
    on Windows. If you'd like to change that, you can pass a different
    "generator" to cmake with the -G flag. A full list of generators can be
    found at the bottom of the output generated by running "cmake". For
    example, "cmake -G 'Xcode' ../src" will generate an Xcode project on OSX.
3) You can now use the build system in the "build" directory. The default
    target will compile everything for you, and the "install" target will copy
    the executable to the main "final_project" directory.

NOTE: This project has only been tested on OS X Yosemite, compilation on other
targets is not gauranteed.

WARNING: This project will only compile with GNU-based compilers and will most
likely not run on Windows as the proper runtime libraries are not included.

---------------------------------------------------------------------------
Running the Program
---------------------------------------------------------------------------

depixelize [-s scale] [-o output_file] input_file

Options:

    -s scale
        The factor to scale the input image by. Defaults to 4.
    -o output_file
        The output file in which to write the scaled images.
        If not specified, default timestamped filenames are used.
    input_file:
        The input image to depixelize.

---------------------------------------------------------------------------
Source Files and Directory Structure
---------------------------------------------------------------------------

A description of the top-level directories and all source/header file pairs
follows.

README              -- this file

images/             -- a set of input images from the original paper
                        (C) Nintendo Co., Ltd

src/build/*         == Build system stuff.
    CMakeLists.txt  -- Compiler flags can be adjusted by editing the list in
                        here.

src/depixelize/     == Project-specific files.
    main            -- Main function, and application backend.
    pixel_grid      -- An implementation of an 8-connected pixel grid that can
                        make itself planar and resolve ambiguities.
